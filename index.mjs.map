{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/ndarray.js","../lib/accessors.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancewd( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvariancewd( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default nanvariancewd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanvariancewd( 5, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancewd( N, correction, x, strideX, offsetX ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar o;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, correction, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = x[ offsetX ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = v - mu;\n\t\t\tn += 1;\n\t\t\tmu += delta / n;\n\t\t\tM2 += delta * ( v - mu );\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn M2 / nc;\n}\n\n\n// EXPORTS //\n\nexport default nanvariancewd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = nanvariancewd( x.length, 1, arraylike2object( x ), 1, 0 );\n* // returns ~4.3333\n*/\nfunction nanvariancewd( N, correction, x, strideX, offsetX ) {\n\tvar delta;\n\tvar xbuf;\n\tvar get;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\t// Cache a reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = get( xbuf, offsetX );\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tdelta = v - mu;\n\t\t\tn += 1;\n\t\t\tmu += delta / n;\n\t\t\tM2 += delta * ( v - mu );\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn M2 / nc;\n}\n\n\n// EXPORTS //\n\nexport default nanvariancewd;\n"],"names":["nanvariancewd","N","correction","x","strideX","offsetX","delta","mu","M2","ix","nc","o","v","n","i","NaN","arraylike2object","accessorProtocol","xbuf","get","data","accessors","ndarray","stride2offset"],"mappings":";;2MA2CA,SAASA,EAAeC,EAAGC,EAAYC,EAAGC,GACzC,OCKD,SAAwBH,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,OAAOc,IAGR,IADAJ,EAAIK,EAAkBb,IACfc,iBACN,OChBF,SAAwBhB,EAAGC,EAAYC,EAAGC,EAASC,GAClD,IAAIC,EACAY,EACAC,EACAZ,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EAQJ,GALAI,EAAOf,EAAEiB,KAGTD,EAAMhB,EAAEkB,UAAW,GAER,IAANpB,GAAuB,IAAZG,EAEf,OADAQ,EAAIO,EAAKD,EAAMb,KACJO,GAAKX,EAAEC,EAAa,EACvB,EAEDa,IAMR,IAJAN,EAAKJ,EACLG,EAAK,EACLD,EAAK,EACLM,EAAI,EACEC,EAAI,EAAGA,EAAIb,EAAGa,KACnBF,EAAIO,EAAKD,EAAMT,KACJG,IAIVJ,IAHAF,EAAQM,EAAIL,IAGIK,GADhBL,GAAMD,GADNO,GAAK,MAINJ,GAAML,EAGP,OADAM,EAAKG,EAAIX,IACE,EACHa,IAEDP,EAAKE,CACb,CD5BSW,CAAWpB,EAAGC,EAAYS,EAAGP,EAASC,GAE9C,GAAW,IAANJ,GAAuB,IAAZG,EAEf,OADAQ,EAAIT,EAAGE,KACIO,GAAKX,EAAEC,EAAa,EACvB,EAEDa,IAMR,IAJAN,EAAKJ,EACLG,EAAK,EACLD,EAAK,EACLM,EAAI,EACEC,EAAI,EAAGA,EAAIb,EAAGa,KACnBF,EAAIT,EAAGM,KACIG,IAIVJ,IAHAF,EAAQM,EAAIL,IAGIK,GADhBL,GAAMD,GADNO,GAAK,MAINJ,GAAML,EAGP,OADAM,EAAKG,EAAIX,IACE,EACHa,IAEDP,EAAKE,CACb,CDjDQY,CAASrB,EAAGC,EAAYC,EAAGC,EAASmB,EAAetB,EAAGG,GAC9D"}