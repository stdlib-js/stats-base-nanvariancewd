{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419\u201320. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149\u201350. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = nanvariancewd( x.length, 1, arraylike2object( x ), 1, 0 );\n* // returns ~4.3333\n*/\nfunction nanvariancewd( N, correction, x, strideX, offsetX ) {\n\tvar delta;\n\tvar xbuf;\n\tvar get;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\t// Cache a reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = get( xbuf, offsetX );\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = get( xbuf, ix );\n\t\tif ( v === v ) {\n\t\t\tdelta = v - mu;\n\t\t\tn += 1;\n\t\t\tmu += delta / n;\n\t\t\tM2 += delta * ( v - mu );\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn M2 / nc;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419\u201320. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149\u201350. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} variance\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanvariancewd( 5, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction nanvariancewd( N, correction, x, strideX, offsetX ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar o;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, correction, o, strideX, offsetX );\n\t}\n\tif ( N === 1 || strideX === 0 ) {\n\t\tv = x[ offsetX ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = v - mu;\n\t\t\tn += 1;\n\t\t\tmu += delta / n;\n\t\t\tM2 += delta * ( v - mu );\n\t\t}\n\t\tix += strideX;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn M2 / nc;\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancewd( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction nanvariancewd( N, correction, x, strideX ) {\n\treturn ndarray( N, correction, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* @module @stdlib/stats-base-nanvariancewd\n*\n* @example\n* var nanvariancewd = require( '@stdlib/stats-base-nanvariancewd' );\n*\n* var x = [ 1.0, -2.0, NaN, 2.0 ];\n*\n* var v = nanvariancewd( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var nanvariancewd = require( '@stdlib/stats-base-nanvariancewd' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ];\n*\n* var v = nanvariancewd.ndarray( 5, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAiDA,SAASC,EAAeC,EAAGC,EAAYC,EAAGC,EAASC,EAAU,CAC5D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAQJ,GALAR,EAAOJ,EAAE,KAGTK,EAAML,EAAE,UAAW,CAAE,EAEhBF,IAAM,GAAKG,IAAY,EAE3B,OADAS,EAAIL,EAAKD,EAAMF,CAAQ,EAClBQ,IAAMA,GAAKZ,EAAEC,EAAa,EACvB,EAED,IAMR,IAJAS,EAAKN,EACLK,EAAK,EACLD,EAAK,EACLK,EAAI,EACEC,EAAI,EAAGA,EAAId,EAAGc,IACnBF,EAAIL,EAAKD,EAAMI,CAAG,EACbE,IAAMA,IACVP,EAAQO,EAAIJ,EACZK,GAAK,EACLL,GAAMH,EAAQQ,EACdJ,GAAMJ,GAAUO,EAAIJ,IAErBE,GAAMP,EAGP,OADAQ,EAAKE,EAAIZ,EACJU,GAAM,EACH,IAEDF,EAAKE,CACb,CAKAb,EAAO,QAAUC,IClGjB,IAAAgB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EAClEC,EAAY,IA0BhB,SAASC,EAAeC,EAAGC,EAAYC,EAAGC,EAASC,EAAU,CAC5D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKb,GAAK,EACT,MAAO,KAGR,GADAU,EAAIb,EAAkBK,CAAE,EACnBQ,EAAE,iBACN,OAAOZ,EAAWE,EAAGC,EAAYS,EAAGP,EAASC,CAAQ,EAEtD,GAAKJ,IAAM,GAAKG,IAAY,EAE3B,OADAQ,EAAIT,EAAGE,CAAQ,EACVO,IAAMA,GAAKX,EAAEC,EAAa,EACvB,EAED,IAMR,IAJAO,EAAKJ,EACLG,EAAK,EACLD,EAAK,EACLM,EAAI,EACEC,EAAI,EAAGA,EAAIb,EAAGa,IACnBF,EAAIT,EAAGM,CAAG,EACLG,IAAMA,IACVN,EAAQM,EAAIL,EACZM,GAAK,EACLN,GAAMD,EAAQO,EACdL,GAAMF,GAAUM,EAAIL,IAErBE,GAAML,EAGP,OADAM,EAAKG,EAAIX,EACJQ,GAAM,EACH,IAEDF,EAAKE,CACb,CAKAb,EAAO,QAAUG,IClGjB,IAAAe,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAoBd,SAASC,EAAeC,EAAGC,EAAYC,EAAGC,EAAU,CACnD,OAAOL,EAASE,EAAGC,EAAYC,EAAGC,EAASN,EAAeG,EAAGG,CAAQ,CAAE,CACxE,CAKAP,EAAO,QAAUG,ICNjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "nanvariancewd", "N", "correction", "x", "strideX", "offsetX", "delta", "xbuf", "get", "mu", "M2", "ix", "nc", "v", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "accessors", "nanvariancewd", "N", "correction", "x", "strideX", "offsetX", "delta", "mu", "M2", "ix", "nc", "o", "v", "n", "i", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "nanvariancewd", "N", "correction", "x", "strideX", "setReadOnly", "main", "ndarray"]
}
